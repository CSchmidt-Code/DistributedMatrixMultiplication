/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCSendMatrixTasks_H
#define RPCSendMatrixTasks_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "RPCSendMatrixTasks_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RPCSendMatrixTasksIf {
 public:
  virtual ~RPCSendMatrixTasksIf() {}
  virtual bool calcTask(const RPCMatrixTask& rpc_matrix_task) = 0;
  virtual bool sendTaskResult(const bool last_chunk) = 0;
  virtual bool isMQTTInitialized() = 0;
  virtual void MQTTReady() = 0;
  virtual void calculationIsFinished() = 0;
};

class RPCSendMatrixTasksIfFactory {
 public:
  typedef RPCSendMatrixTasksIf Handler;

  virtual ~RPCSendMatrixTasksIfFactory() {}

  virtual RPCSendMatrixTasksIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCSendMatrixTasksIf* /* handler */) = 0;
  };

class RPCSendMatrixTasksIfSingletonFactory : virtual public RPCSendMatrixTasksIfFactory {
 public:
  RPCSendMatrixTasksIfSingletonFactory(const ::std::shared_ptr<RPCSendMatrixTasksIf>& iface) : iface_(iface) {}
  virtual ~RPCSendMatrixTasksIfSingletonFactory() {}

  virtual RPCSendMatrixTasksIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(RPCSendMatrixTasksIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<RPCSendMatrixTasksIf> iface_;
};

class RPCSendMatrixTasksNull : virtual public RPCSendMatrixTasksIf {
 public:
  virtual ~RPCSendMatrixTasksNull() {}
  bool calcTask(const RPCMatrixTask& /* rpc_matrix_task */) override {
    bool _return = false;
    return _return;
  }
  bool sendTaskResult(const bool /* last_chunk */) override {
    bool _return = false;
    return _return;
  }
  bool isMQTTInitialized() override {
    bool _return = false;
    return _return;
  }
  void MQTTReady() override {
    return;
  }
  void calculationIsFinished() override {
    return;
  }
};

typedef struct _RPCSendMatrixTasks_calcTask_args__isset {
  _RPCSendMatrixTasks_calcTask_args__isset() : rpc_matrix_task(false) {}
  bool rpc_matrix_task :1;
} _RPCSendMatrixTasks_calcTask_args__isset;

class RPCSendMatrixTasks_calcTask_args {
 public:

  RPCSendMatrixTasks_calcTask_args(const RPCSendMatrixTasks_calcTask_args&);
  RPCSendMatrixTasks_calcTask_args& operator=(const RPCSendMatrixTasks_calcTask_args&);
  RPCSendMatrixTasks_calcTask_args() noexcept {
  }

  virtual ~RPCSendMatrixTasks_calcTask_args() noexcept;
  RPCMatrixTask rpc_matrix_task;

  _RPCSendMatrixTasks_calcTask_args__isset __isset;

  void __set_rpc_matrix_task(const RPCMatrixTask& val);

  bool operator == (const RPCSendMatrixTasks_calcTask_args & rhs) const
  {
    if (!(rpc_matrix_task == rhs.rpc_matrix_task))
      return false;
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_calcTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_calcTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_calcTask_pargs {
 public:


  virtual ~RPCSendMatrixTasks_calcTask_pargs() noexcept;
  const RPCMatrixTask* rpc_matrix_task;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_calcTask_result__isset {
  _RPCSendMatrixTasks_calcTask_result__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_calcTask_result__isset;

class RPCSendMatrixTasks_calcTask_result {
 public:

  RPCSendMatrixTasks_calcTask_result(const RPCSendMatrixTasks_calcTask_result&) noexcept;
  RPCSendMatrixTasks_calcTask_result& operator=(const RPCSendMatrixTasks_calcTask_result&) noexcept;
  RPCSendMatrixTasks_calcTask_result() noexcept
                                     : success(0) {
  }

  virtual ~RPCSendMatrixTasks_calcTask_result() noexcept;
  bool success;

  _RPCSendMatrixTasks_calcTask_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCSendMatrixTasks_calcTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_calcTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_calcTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_calcTask_presult__isset {
  _RPCSendMatrixTasks_calcTask_presult__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_calcTask_presult__isset;

class RPCSendMatrixTasks_calcTask_presult {
 public:


  virtual ~RPCSendMatrixTasks_calcTask_presult() noexcept;
  bool* success;

  _RPCSendMatrixTasks_calcTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RPCSendMatrixTasks_sendTaskResult_args__isset {
  _RPCSendMatrixTasks_sendTaskResult_args__isset() : last_chunk(false) {}
  bool last_chunk :1;
} _RPCSendMatrixTasks_sendTaskResult_args__isset;

class RPCSendMatrixTasks_sendTaskResult_args {
 public:

  RPCSendMatrixTasks_sendTaskResult_args(const RPCSendMatrixTasks_sendTaskResult_args&) noexcept;
  RPCSendMatrixTasks_sendTaskResult_args& operator=(const RPCSendMatrixTasks_sendTaskResult_args&) noexcept;
  RPCSendMatrixTasks_sendTaskResult_args() noexcept
                                         : last_chunk(0) {
  }

  virtual ~RPCSendMatrixTasks_sendTaskResult_args() noexcept;
  bool last_chunk;

  _RPCSendMatrixTasks_sendTaskResult_args__isset __isset;

  void __set_last_chunk(const bool val);

  bool operator == (const RPCSendMatrixTasks_sendTaskResult_args & rhs) const
  {
    if (!(last_chunk == rhs.last_chunk))
      return false;
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_sendTaskResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_sendTaskResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_sendTaskResult_pargs {
 public:


  virtual ~RPCSendMatrixTasks_sendTaskResult_pargs() noexcept;
  const bool* last_chunk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_sendTaskResult_result__isset {
  _RPCSendMatrixTasks_sendTaskResult_result__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_sendTaskResult_result__isset;

class RPCSendMatrixTasks_sendTaskResult_result {
 public:

  RPCSendMatrixTasks_sendTaskResult_result(const RPCSendMatrixTasks_sendTaskResult_result&) noexcept;
  RPCSendMatrixTasks_sendTaskResult_result& operator=(const RPCSendMatrixTasks_sendTaskResult_result&) noexcept;
  RPCSendMatrixTasks_sendTaskResult_result() noexcept
                                           : success(0) {
  }

  virtual ~RPCSendMatrixTasks_sendTaskResult_result() noexcept;
  bool success;

  _RPCSendMatrixTasks_sendTaskResult_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCSendMatrixTasks_sendTaskResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_sendTaskResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_sendTaskResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_sendTaskResult_presult__isset {
  _RPCSendMatrixTasks_sendTaskResult_presult__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_sendTaskResult_presult__isset;

class RPCSendMatrixTasks_sendTaskResult_presult {
 public:


  virtual ~RPCSendMatrixTasks_sendTaskResult_presult() noexcept;
  bool* success;

  _RPCSendMatrixTasks_sendTaskResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RPCSendMatrixTasks_isMQTTInitialized_args {
 public:

  RPCSendMatrixTasks_isMQTTInitialized_args(const RPCSendMatrixTasks_isMQTTInitialized_args&) noexcept;
  RPCSendMatrixTasks_isMQTTInitialized_args& operator=(const RPCSendMatrixTasks_isMQTTInitialized_args&) noexcept;
  RPCSendMatrixTasks_isMQTTInitialized_args() noexcept {
  }

  virtual ~RPCSendMatrixTasks_isMQTTInitialized_args() noexcept;

  bool operator == (const RPCSendMatrixTasks_isMQTTInitialized_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_isMQTTInitialized_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_isMQTTInitialized_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_isMQTTInitialized_pargs {
 public:


  virtual ~RPCSendMatrixTasks_isMQTTInitialized_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_isMQTTInitialized_result__isset {
  _RPCSendMatrixTasks_isMQTTInitialized_result__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_isMQTTInitialized_result__isset;

class RPCSendMatrixTasks_isMQTTInitialized_result {
 public:

  RPCSendMatrixTasks_isMQTTInitialized_result(const RPCSendMatrixTasks_isMQTTInitialized_result&) noexcept;
  RPCSendMatrixTasks_isMQTTInitialized_result& operator=(const RPCSendMatrixTasks_isMQTTInitialized_result&) noexcept;
  RPCSendMatrixTasks_isMQTTInitialized_result() noexcept
                                              : success(0) {
  }

  virtual ~RPCSendMatrixTasks_isMQTTInitialized_result() noexcept;
  bool success;

  _RPCSendMatrixTasks_isMQTTInitialized_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCSendMatrixTasks_isMQTTInitialized_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_isMQTTInitialized_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_isMQTTInitialized_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCSendMatrixTasks_isMQTTInitialized_presult__isset {
  _RPCSendMatrixTasks_isMQTTInitialized_presult__isset() : success(false) {}
  bool success :1;
} _RPCSendMatrixTasks_isMQTTInitialized_presult__isset;

class RPCSendMatrixTasks_isMQTTInitialized_presult {
 public:


  virtual ~RPCSendMatrixTasks_isMQTTInitialized_presult() noexcept;
  bool* success;

  _RPCSendMatrixTasks_isMQTTInitialized_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RPCSendMatrixTasks_MQTTReady_args {
 public:

  RPCSendMatrixTasks_MQTTReady_args(const RPCSendMatrixTasks_MQTTReady_args&) noexcept;
  RPCSendMatrixTasks_MQTTReady_args& operator=(const RPCSendMatrixTasks_MQTTReady_args&) noexcept;
  RPCSendMatrixTasks_MQTTReady_args() noexcept {
  }

  virtual ~RPCSendMatrixTasks_MQTTReady_args() noexcept;

  bool operator == (const RPCSendMatrixTasks_MQTTReady_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_MQTTReady_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_MQTTReady_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_MQTTReady_pargs {
 public:


  virtual ~RPCSendMatrixTasks_MQTTReady_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_MQTTReady_result {
 public:

  RPCSendMatrixTasks_MQTTReady_result(const RPCSendMatrixTasks_MQTTReady_result&) noexcept;
  RPCSendMatrixTasks_MQTTReady_result& operator=(const RPCSendMatrixTasks_MQTTReady_result&) noexcept;
  RPCSendMatrixTasks_MQTTReady_result() noexcept {
  }

  virtual ~RPCSendMatrixTasks_MQTTReady_result() noexcept;

  bool operator == (const RPCSendMatrixTasks_MQTTReady_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_MQTTReady_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_MQTTReady_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_MQTTReady_presult {
 public:


  virtual ~RPCSendMatrixTasks_MQTTReady_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RPCSendMatrixTasks_calculationIsFinished_args {
 public:

  RPCSendMatrixTasks_calculationIsFinished_args(const RPCSendMatrixTasks_calculationIsFinished_args&) noexcept;
  RPCSendMatrixTasks_calculationIsFinished_args& operator=(const RPCSendMatrixTasks_calculationIsFinished_args&) noexcept;
  RPCSendMatrixTasks_calculationIsFinished_args() noexcept {
  }

  virtual ~RPCSendMatrixTasks_calculationIsFinished_args() noexcept;

  bool operator == (const RPCSendMatrixTasks_calculationIsFinished_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_calculationIsFinished_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_calculationIsFinished_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_calculationIsFinished_pargs {
 public:


  virtual ~RPCSendMatrixTasks_calculationIsFinished_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_calculationIsFinished_result {
 public:

  RPCSendMatrixTasks_calculationIsFinished_result(const RPCSendMatrixTasks_calculationIsFinished_result&) noexcept;
  RPCSendMatrixTasks_calculationIsFinished_result& operator=(const RPCSendMatrixTasks_calculationIsFinished_result&) noexcept;
  RPCSendMatrixTasks_calculationIsFinished_result() noexcept {
  }

  virtual ~RPCSendMatrixTasks_calculationIsFinished_result() noexcept;

  bool operator == (const RPCSendMatrixTasks_calculationIsFinished_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCSendMatrixTasks_calculationIsFinished_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCSendMatrixTasks_calculationIsFinished_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCSendMatrixTasks_calculationIsFinished_presult {
 public:


  virtual ~RPCSendMatrixTasks_calculationIsFinished_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCSendMatrixTasksClient : virtual public RPCSendMatrixTasksIf {
 public:
  RPCSendMatrixTasksClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCSendMatrixTasksClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool calcTask(const RPCMatrixTask& rpc_matrix_task) override;
  void send_calcTask(const RPCMatrixTask& rpc_matrix_task);
  bool recv_calcTask();
  bool sendTaskResult(const bool last_chunk) override;
  void send_sendTaskResult(const bool last_chunk);
  bool recv_sendTaskResult();
  bool isMQTTInitialized() override;
  void send_isMQTTInitialized();
  bool recv_isMQTTInitialized();
  void MQTTReady() override;
  void send_MQTTReady();
  void recv_MQTTReady();
  void calculationIsFinished() override;
  void send_calculationIsFinished();
  void recv_calculationIsFinished();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCSendMatrixTasksProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RPCSendMatrixTasksIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (RPCSendMatrixTasksProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_calcTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendTaskResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isMQTTInitialized(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MQTTReady(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calculationIsFinished(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCSendMatrixTasksProcessor(::std::shared_ptr<RPCSendMatrixTasksIf> iface) :
    iface_(iface) {
    processMap_["calcTask"] = &RPCSendMatrixTasksProcessor::process_calcTask;
    processMap_["sendTaskResult"] = &RPCSendMatrixTasksProcessor::process_sendTaskResult;
    processMap_["isMQTTInitialized"] = &RPCSendMatrixTasksProcessor::process_isMQTTInitialized;
    processMap_["MQTTReady"] = &RPCSendMatrixTasksProcessor::process_MQTTReady;
    processMap_["calculationIsFinished"] = &RPCSendMatrixTasksProcessor::process_calculationIsFinished;
  }

  virtual ~RPCSendMatrixTasksProcessor() {}
};

class RPCSendMatrixTasksProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCSendMatrixTasksProcessorFactory(const ::std::shared_ptr< RPCSendMatrixTasksIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< RPCSendMatrixTasksIfFactory > handlerFactory_;
};

class RPCSendMatrixTasksMultiface : virtual public RPCSendMatrixTasksIf {
 public:
  RPCSendMatrixTasksMultiface(std::vector<std::shared_ptr<RPCSendMatrixTasksIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCSendMatrixTasksMultiface() {}
 protected:
  std::vector<std::shared_ptr<RPCSendMatrixTasksIf> > ifaces_;
  RPCSendMatrixTasksMultiface() {}
  void add(::std::shared_ptr<RPCSendMatrixTasksIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool calcTask(const RPCMatrixTask& rpc_matrix_task) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calcTask(rpc_matrix_task);
    }
    return ifaces_[i]->calcTask(rpc_matrix_task);
  }

  bool sendTaskResult(const bool last_chunk) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendTaskResult(last_chunk);
    }
    return ifaces_[i]->sendTaskResult(last_chunk);
  }

  bool isMQTTInitialized() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isMQTTInitialized();
    }
    return ifaces_[i]->isMQTTInitialized();
  }

  void MQTTReady() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MQTTReady();
    }
    ifaces_[i]->MQTTReady();
  }

  void calculationIsFinished() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calculationIsFinished();
    }
    ifaces_[i]->calculationIsFinished();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RPCSendMatrixTasksConcurrentClient : virtual public RPCSendMatrixTasksIf {
 public:
  RPCSendMatrixTasksConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RPCSendMatrixTasksConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool calcTask(const RPCMatrixTask& rpc_matrix_task) override;
  int32_t send_calcTask(const RPCMatrixTask& rpc_matrix_task);
  bool recv_calcTask(const int32_t seqid);
  bool sendTaskResult(const bool last_chunk) override;
  int32_t send_sendTaskResult(const bool last_chunk);
  bool recv_sendTaskResult(const int32_t seqid);
  bool isMQTTInitialized() override;
  int32_t send_isMQTTInitialized();
  bool recv_isMQTTInitialized(const int32_t seqid);
  void MQTTReady() override;
  int32_t send_MQTTReady();
  void recv_MQTTReady(const int32_t seqid);
  void calculationIsFinished() override;
  int32_t send_calculationIsFinished();
  void recv_calculationIsFinished(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
